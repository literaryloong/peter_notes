
************
slice[m:n] 索引从m到n（不包含），长度 n-m


# interface{}
任意的类型都实现了空interface(我们这样定义：interface{})，也就是包含0个method的interface

# go中chan 的使用
正确
func main() {
	done := make(chan error)
	go func() { done <- nil }()
	fmt.Println(<-done)
}
错误
func main() {
	done := make(chan error)
	//这里改成（make(chan err ,1)就不抱错了,这个什么情况?）
	done <- nil
	fmt.Println(<-done)
}
解释：
make(chan error)是一个无缓冲的队列，make(chan err ,1)这是一个长度为1有缓冲的队列
无缓冲队列下，执行到done<-nil时阻塞此例中唯一的goroutine即main 所以程序报错fatal error: all goroutines are asleep - deadlock!

# goroutine调用
小鼹鼠搬砖的goroutine任务调度的解释，见 http://studygolang.com/wr?u=http%3a%2f%2fskoo.me%2fgo%2f2013%2f11%2f29%2fgolang-schedule
M	-	地鼠
P	-	小车
G	-	转(Goroutine)
Sched	-	工厂管理员

# 访问权限
大写 - public
小谢 - private

# go iota使用
http://studygolang.com/articles/2192

# go defere
defer理解为 后进先出的栈空间，在函数结束后调用该栈
常用来做资源回收，>> java中catch/final >> c++中析构

# go 异常处理
go不鼓励将异常与控制代码混为一谈，不鼓励使用异常

defer func(){
	if err:=recover();err!=nil{
		handler(err)
	}
}()
// do something
panic(xx)

# go channel
go-feature => 网络、并发    并发feature => channel routine
channel是goroutine之间通信的一种方式，它与Unix中管道类似
channel是类型相关的，一个channel只能传递一种类型
go中有四种引用类型：slice/map/channel/interface

var ch chan int

var ch1 chan<- int  //ch1只能写

var ch2 <-chan int  //ch2只能读

ci := make(chan int)            // unbuffered channel of integers

cj := make(chan int, 0)         // unbuffered channel of integers

cs := make(chan *os.File, 100)  // buffered channel of pointers to Files

超时实现
for{
	select {
		case i := <-c:
			fmt.Println(i)
		case <-time.After(time.Duration(3) * time.Second):    //设置超时时间为３ｓ，如果channel　3s钟没有响应，一直阻塞，则报告超时，进行超时处理．
			fmt.Println("timeout")
			o <- true
			break
	}
}

# go 同步控制
sync包
type Once
	func (o *Once) Do(f func())						-- Once是只执行一次动作的对象
type Cond											-- 
    func NewCond(l Locker) *Cond					-- 
    func (c *Cond) Broadcast()						-- 
    func (c *Cond) Signal()							-- 
    func (c *Cond) Wait()							-- 
type Mutex											-- 
    func (m *Mutex) Lock()							-- 
    func (m *Mutex) Unlock()						-- 	
type Once											-- 
    func (o *Once) Do(f func())						-- 
type Pool											-- 
    func (p *Pool) Get() interface{}				-- 
    func (p *Pool) Put(x interface{})				-- 
type RWMutex										-- 
    func (rw *RWMutex) Lock()						-- 
    func (rw *RWMutex) RLock()						-- 
    func (rw *RWMutex) RLocker() Locker				-- 
    func (rw *RWMutex) RUnlock()					--	
    func (rw *RWMutex) Unlock()						-- 
type WaitGroup
    func (wg *WaitGroup) Add(delta int)
    func (wg *WaitGroup) Done()
    func (wg *WaitGroup) Wait()
	
## WaitGroup
func main() {
    var wg sync.WaitGroup
    var urls = []string{
            "http://www.golang.org/",
            "http://www.google.com/",
            "http://www.baiyuxiong.com/",
    }
    for _, url := range urls {
            // Increment the WaitGroup counter.
            wg.Add(1)
            // Launch a goroutine to fetch the URL.
            go func(url string) {
                    // Decrement the counter when the goroutine completes.
                    defer wg.Done()
                    // Fetch the URL.
                    http.Get(url)
            fmt.Println(url);
            }(url)
    }
    // Wait for all HTTP fetches to complete.
    wg.Wait()
    fmt.Println("over");
}


# go defer 和 return执行关系	（http://studygolang.com/articles/4809）
defer、return、返回值三者的执行逻辑应该是：return最先执行，return负责将结果写入返回值中；接着defer开始执行一些收尾工作；最后函数携带当前返回值退出。
func main(){ fmt.Println("return:",b())}	// 打印结果为 return: 2
func b() (i int){ //有名返回
	defer func(){i++; fmt.Println("defer2:",i)}()
	defer func(){i++; fmt.Println("defer1:",i)}()
	return i // 或者直接 return 效果相同
}

# go atomic -原子操作；操作系统底层硬件支持的锁操作
atomic.CAS   atomic.add  atomic.store   atomic.load

# go Signal
http://tonybai.com/2012/09/21/signal-handling-in-go/
处理进程关闭时系统信号
 
# go 数字和字符串互转
strconv.Itoa	strconv.Atoi
fmt.Sprintf("%d", i)  

$ go time	http://studygolang.com/articles/736
time.Now  time.Unix(1389058332)  time.Date(2017,1,1)
time.format
时间差   time.Sub() <time.Duration>   time.since


# go struct{}
var s struct{} 声明就能使用

# go import
import . "github.com/onsi/ginkgo"   ->>  调用省略前缀的包名
import f "fmt"	-->> 别名
import "database/sql" _  ->> 仅执行该包的init()方法 
引入包过程 ->> 包内引用包导入 ->> 包内变量常量声明，init(如果有)函数执行


# go unit test  https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/11.3.md
_test.go结尾   
import testing
func TestXxx (t *testing.T)   通过调用testing.T的Error, Errorf, FailNow, Fatal, FatalIf方法，说明测试不通过，调用Log方法用来记录测试的信息
go test -v
压力测试
func Benchmark_TimeConsumingFunction(b *testing.B) {
	b.StopTimer() //调用该函数停止压力测试的时间计数

	//做一些初始化的工作,例如读取文件数据,数据库连接之类的,
	//这样这些时间不影响我们测试函数本身的性能

	b.StartTimer() //重新开始时间
	for i := 0; i < b.N; i++ {
		Division(4, 5)
	}
}
go test -file webbench_test.go -test.bench=".*"

# go 构造函数
不支持 ->> NewXX方法
默认参数 ->> 不支持

# go vet 检查
By package, from the go tool:	->> go vet package/path/name
By files:		->>	go tool vet source/directory/*.go
By directory:	->>	go tool vet source/directory

# go 坑
The defer only defers the function call. The field and method are accessed immediately. （https://stackoverflow.com/questions/16280176/go-panic-runtime-error-invalid-memory-address-or-nil-pointer-dereference）

 multiple-value strconv.ParseInt() in single-value context   返回值有多个，但只有一个接受变量

 
# go 编译为32位
 set GOARCH=386
go build
make.bat


20171212
GOgland收费，使用IDEA装Go插件代替
https://plugins.jetbrains.com/plugin/5047-go-language-golang-org-support-plugin
虽然阉割了很多Gogland功能


20180505
项目根目录下定义了很多go文件，都是package main，调试提示方法找不到：
*修改运行配置，把File改成Directory

# goland crack 2021
https://vrg123.com/
4565

https://docs.qq.com/doc/DTExXaVpvbHNka092